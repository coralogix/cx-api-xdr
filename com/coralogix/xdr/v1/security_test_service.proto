syntax = "proto3";

package com.coralogix.xdr.v1;

import "com/coralogix/xdr/v1/audit_log.proto";
import "com/coralogix/xdr/v1/security_test_breakdown.proto";
import "com/coralogix/xdr/v1/security_tests_overview.proto";
import "com/coralogix/xdr/v1/security_test_resource.proto";
import "com/coralogix/xdr/v1/security_test_filter.proto";

import "google/protobuf/wrappers.proto";
import "google/protobuf/descriptor.proto";
import "google/api/annotations.proto";

service SecurityTestService {
  // Maybe it would be better to be a post in the future - if we decide to support pagination
  rpc GetSecurityTestOverview(GetSecurityTestsOverviewRequest) returns (GetSecurityTestsOverviewResponse) {
    option (audit_log_description).description = "get security tests overview - stats grouped by day";
    option (google.api.http) = {
      post: "/xdr/v1/test/overview/{security_test_id}"
      body: "*"
    };
  }

  rpc GetSecurityTestBreakdown(GetSecurityTestBreakdownRequest) returns (GetSecurityTestBreakdownResponse) {
    option (audit_log_description).description = "get security test breakdown";
    option (google.api.http) = {
      post: "/xdr/v1/test/breakdown/{security_test_id}"
      body: "*"
    };
  }

  rpc GetSecurityTestResources(GetSecurityTestResourcesRequest) returns (GetSecurityTestResourcesResponse) {
    option (audit_log_description).description = "get security test resources";
    option (google.api.http) = {
      post: "/xdr/v1/test/resources/{security_test_id}"
      body: "*"
    };
  }

  rpc GetTestedResource(GetTestedResourceRequest) returns (GetTestedResourceResponse) {
    option (audit_log_description).description = "get tested resource with details";
    option (google.api.http) = {
      get: "/xdr/v1/test/resource/{security_test_id}/{security_rule_id}"
    };
  }

  rpc GetSecurityTestFilterAggs(GetSecurityTestFilterAggsRequest) returns (GetSecurityTestFilterAggsResponse) {
    option (audit_log_description).description = "get security test filter aggregations - value counts";
    option (google.api.http) = {
      post: "/xdr/v1/security-test/{security_test_id}/filter-aggregations"
      body: "*"
    };
  }

  rpc GetFilterableFields(GetFilterableFieldsRequest) returns (GetFilterableFieldsResponse){
    option (audit_log_description).description = "get list of fields to use in filtering";
    option (google.api.http) = {
      post: "/xdr/v1/security-test/filters"
    };
  }
}

message GetSecurityTestsOverviewRequest {
  optional SecurityTestFilter filter = 2;
}

message GetSecurityTestsOverviewResponse {
  SecurityTestsOverview overview = 1;
}

message GetSecurityTestBreakdownRequest {
  // Defaults to latest
  optional google.protobuf.StringValue security_test_id = 1;
  optional SecurityTestFilter filter = 2;
}

message GetSecurityTestBreakdownResponse {
  SecurityTestBreakdown test_breakdown = 1;
}

message GetSecurityTestResourcesRequest {
  optional google.protobuf.StringValue security_test_id = 1;
  optional google.protobuf.StringValue test_identity = 2;
  optional SecurityTestFilter filter = 3;
}

message GetSecurityTestResourcesResponse {
  google.protobuf.StringValue security_test_id = 1; // UUID
  SecurityTestItem security_test_item = 2;
  // This should be optimized with paginated events maybe - leaving that as it's for now
  repeated SecurityTestResource resources = 3;
}

message GetTestedResourceRequest {
  optional google.protobuf.StringValue id = 1;
}

message GetTestedResourceResponse {
  TestedResource resource = 1;
}

message GetSecurityTestFilterAggsRequest {
  google.protobuf.StringValue security_test_id = 1; // UUID
  SecurityTestFilter filter = 2;
}

message GetSecurityTestFilterAggsResponse {
  LogFilterCounts log_filter = 1;
  SecurityRuleFilterCounts security_rule_filter = 2;
}

message GetFilterableFieldsRequest {
}

message GetFilterableFieldsResponse {

  message PossibleValues {
    repeated google.protobuf.StringValue values = 1;
  }

  map<string, PossibleValues> provider_filters = 1;
  map<string, PossibleValues> service_filters = 2;
  map<string, PossibleValues> security_rule_filters = 3;


}